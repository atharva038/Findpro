<% layout("/layouts/boilerplate.ejs") %>

    <div class="auth-page">
        <div class="auth-container">
            <div class="auth-card">
                <!-- Brand Logo -->
                <div class="auth-brand">
                    <img src="/img/logo.jpg" alt="KnockNFix" class="auth-logo">
                </div>

                <!-- Card Header -->
                <div class="auth-header">
                    <h2>Create New Password</h2>
                    <p class="text-muted">Enter your new password below</p>
                </div>

                <!-- Reset Password Form -->
                <div class="auth-body">
                    <!-- Alert for server-side messages -->
                    <% if(error && error.length> 0) { %>
                        <div class="alert alert-danger mb-4 animated fadeIn">
                            <div class="alert-content">
                                <i class="fas fa-exclamation-circle alert-icon"></i>
                                <div class="alert-message">
                                    <%= error %>
                                </div>
                            </div>
                        </div>
                        <% } %>
                            <% if(success && success.length> 0) { %>
                                <div class="alert alert-success mb-4 animated fadeIn">
                                    <div class="alert-content">
                                        <i class="fas fa-check-circle alert-icon"></i>
                                        <div class="alert-message">
                                            <%= success %>
                                        </div>
                                    </div>
                                </div>
                                <% } %>

                                    <!-- Client-side validation message area -->
                                    <div id="validationFeedback"
                                        class="alert alert-warning mb-4 d-none animated fadeIn">
                                        <div class="alert-content">
                                            <i class="fas fa-exclamation-triangle alert-icon"></i>
                                            <div class="alert-message" id="validationMessage"></div>
                                        </div>
                                    </div>

                                    <!-- Token expired message -->
                                    <% if(tokenExpired) { %>
                                        <div class="expired-token-container animated fadeIn">
                                            <div class="expired-token-icon">
                                                <i class="fas fa-clock"></i>
                                            </div>
                                            <h3 class="expired-token-title">Reset Link Expired</h3>
                                            <p class="expired-token-message">This password reset link has expired or is
                                                invalid. Please request a new one.</p>

                                            <div class="expired-token-actions">
                                                <a href="/forgot-password" class="btn btn-primary btn-lg w-100 mb-3">
                                                    <i class="fas fa-redo-alt me-2"></i> Request New Link
                                                </a>
                                                <a href="/login" class="btn btn-outline-secondary btn-lg w-100">
                                                    <i class="fas fa-sign-in-alt me-2"></i> Back to Login
                                                </a>
                                            </div>
                                        </div>
                                        <% } else { %>
                                            <form action="/reset-password/<%= token %>" method="post"
                                                class="needs-validation" id="resetPasswordForm" novalidate>
                                                <!-- New Password Field -->
                                                <div class="form-group mb-4">
                                                    <label for="password" class="form-label">New Password</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">
                                                            <i class="fas fa-lock"></i>
                                                        </span>
                                                        <input type="password" id="password" name="password"
                                                            class="form-control" placeholder="Create a new password"
                                                            required minlength="8"
                                                            title="Password must be at least 8 characters" />
                                                        <button type="button"
                                                            class="btn btn-outline-secondary toggle-password"
                                                            tabindex="-1" aria-label="Toggle password visibility">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                    </div>
                                                    <div class="invalid-feedback">
                                                        Password must be at least 8 characters.
                                                    </div>
                                                    <div class="password-strength mt-3">
                                                        <div class="progress" style="height: 6px;">
                                                            <div class="progress-bar" role="progressbar"
                                                                style="width: 0%;" aria-valuenow="0" aria-valuemin="0"
                                                                aria-valuemax="100"></div>
                                                        </div>
                                                        <div
                                                            class="d-flex justify-content-between align-items-center mt-1">
                                                            <small class="strength-text text-muted">Password strength:
                                                                <span>Too weak</span></small>
                                                            <small class="strength-requirements text-muted"><span
                                                                    id="charCount">0</span>/8 characters</small>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Confirm Password Field -->
                                                <div class="form-group mb-4">
                                                    <label for="confirmPassword" class="form-label">Confirm
                                                        Password</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text">
                                                            <i class="fas fa-lock-open"></i>
                                                        </span>
                                                        <input type="password" id="confirmPassword"
                                                            name="confirmPassword" class="form-control"
                                                            placeholder="Confirm your new password" required />
                                                        <button type="button"
                                                            class="btn btn-outline-secondary toggle-password"
                                                            tabindex="-1" aria-label="Toggle password visibility">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                    </div>
                                                    <div class="invalid-feedback">
                                                        Passwords do not match.
                                                    </div>
                                                </div>

                                                <!-- Password Requirements -->
                                                <div class="password-requirements mb-4">
                                                    <h6 class="requirements-title">Password Requirements:</h6>
                                                    <div class="requirements-list">
                                                        <div class="requirement-item" id="req-length">
                                                            <i class="fas fa-circle requirement-icon"></i>
                                                            <span>At least 8 characters</span>
                                                        </div>
                                                        <div class="requirement-item" id="req-uppercase">
                                                            <i class="fas fa-circle requirement-icon"></i>
                                                            <span>At least 1 uppercase letter</span>
                                                        </div>
                                                        <div class="requirement-item" id="req-lowercase">
                                                            <i class="fas fa-circle requirement-icon"></i>
                                                            <span>At least 1 lowercase letter</span>
                                                        </div>
                                                        <div class="requirement-item" id="req-number">
                                                            <i class="fas fa-circle requirement-icon"></i>
                                                            <span>At least 1 number</span>
                                                        </div>
                                                        <div class="requirement-item" id="req-special">
                                                            <i class="fas fa-circle requirement-icon"></i>
                                                            <span>At least 1 special character</span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Submit Button -->
                                                <div class="mb-4">
                                                    <button type="submit" class="btn btn-primary btn-lg w-100"
                                                        id="updateButton">
                                                        <i class="fas fa-shield-alt me-2"></i>
                                                        <span class="button-text">Update Password</span>
                                                        <span class="spinner-border spinner-border-sm ms-2 d-none"
                                                            role="status" id="updateSpinner"></span>
                                                    </button>
                                                </div>

                                                <!-- Security Notice -->
                                                <div class="security-notice">
                                                    <div class="notice-icon">
                                                        <i class="fas fa-lock"></i>
                                                    </div>
                                                    <div class="notice-content">
                                                        <strong>Security Tip:</strong> Use a unique password that you
                                                        don't use for other websites.
                                                    </div>
                                                </div>
                                            </form>
                                            <% } %>
                </div>

                <!-- Card Footer -->
                <div class="auth-footer">
                    <p class="mb-0">Remember your password? <a href="/login" class="link-primary">Log in now</a></p>
                </div>
            </div>

            <!-- Additional Help -->
            <div class="auth-help">
                <a href="/contact" class="help-link">
                    <i class="fas fa-headset"></i>
                    <span>Need help?</span>
                </a>
            </div>
        </div>
    </div>

    <style>
        /* Enhanced Auth Page Styling */
        .auth-page {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem 1rem;
            background: linear-gradient(135deg, rgba(247, 248, 252, 0.9) 0%, rgba(237, 241, 255, 0.9) 100%);
            position: relative;
            overflow: hidden;
        }

        .auth-page::before {
            content: '';
            position: absolute;
            width: 200%;
            height: 200%;
            top: -50%;
            left: -50%;
            z-index: -1;
            background: radial-gradient(circle, rgba(240, 243, 252, 0.3) 5%, transparent 6%);
            background-size: 20px 20px;
            background-position: 0 0;
            animation: patternMove 30s linear infinite;
        }

        @keyframes patternMove {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .auth-container {
            width: 100%;
            max-width: 500px;
            position: relative;
            z-index: 1;
            margin: 0 auto;
        }

        .auth-card {
            background-color: #ffffff;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            border-radius: 16px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
            border: 1px solid rgba(86, 103, 253, 0.05);
            width: 100%;
        }

        .auth-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(86, 103, 253, 0.15);
        }

        .auth-brand {
            display: flex;
            justify-content: center;
            padding: 2rem 0 1rem;
        }

        .auth-logo {
            height: 60px;
            object-fit: contain;
        }

        .auth-header {
            text-align: center;
            padding: 0.5rem 2.5rem 1.5rem;
        }

        .auth-header h2 {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
            font-size: 1.75rem;
            background: linear-gradient(45deg, #4f46e5, #6366f1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .auth-header p {
            color: #667085;
            font-size: 1rem;
            margin-bottom: 0;
        }

        .auth-body {
            padding: 1rem 2.5rem;
        }

        .auth-footer {
            padding: 1.5rem 2.5rem 2rem;
            text-align: center;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            background-color: #f9fafb;
            border-radius: 0 0 16px 16px;
        }

        .auth-footer a {
            font-weight: 600;
            text-decoration: none;
            transition: all 0.2s;
        }

        .auth-footer a:hover {
            text-decoration: underline;
        }

        .auth-help {
            margin-top: 1.5rem;
            text-align: center;
        }

        .help-link {
            display: inline-flex;
            align-items: center;
            color: #667085;
            text-decoration: none;
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            transition: all 0.2s ease;
            background-color: rgba(255, 255, 255, 0.7);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .help-link:hover {
            color: #4f46e5;
            background-color: rgba(255, 255, 255, 1);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .help-link i {
            margin-right: 0.5rem;
            font-size: 1rem;
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }

        .input-group {
            display: flex;
            width: 100%;
            position: relative;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
        }

        .input-group-text {
            background-color: white;
            border: 1px solid #e5e7eb;
            border-right: none;
            color: #6b7280;
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            border-top-left-radius: 0.5rem;
            border-bottom-left-radius: 0.5rem;
        }

        .form-control {
            flex: 1;
            min-width: 0;
            display: block;
            width: 100%;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: #374151;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #e5e7eb;
            border-left: none;
            border-radius: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
            height: auto;
            min-height: 48px;
        }

        .form-control:focus {
            border-color: #6366f1;
            box-shadow: 0 0 0 0.25rem rgba(99, 102, 241, 0.15);
            outline: 0;
        }

        .input-group:focus-within .input-group-text {
            border-color: #6366f1;
            color: #4f46e5;
        }

        .form-hint {
            margin-top: 0.5rem;
            font-size: 0.85rem;
            color: #6b7280;
        }

        .toggle-password {
            border: 1px solid #e5e7eb;
            border-left: none;
            border-top-right-radius: 0.5rem !important;
            border-bottom-right-radius: 0.5rem !important;
            color: #6b7280;
            transition: all 0.15s ease;
        }

        .toggle-password:hover {
            background-color: #f9fafb;
            color: #4f46e5;
        }

        .toggle-password:focus {
            box-shadow: none;
            outline: none;
        }

        /* Password Strength */
        .password-strength {
            margin-top: 0.75rem;
        }

        .progress {
            background-color: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            transition: width 0.3s ease;
        }

        .strength-text {
            display: inline-block;
            font-size: 0.85rem;
        }

        .strength-text span {
            font-weight: 600;
        }

        .strength-requirements {
            font-size: 0.85rem;
        }

        /* Password Requirements */
        .password-requirements {
            background-color: #f9fafb;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
            border: 1px solid #e5e7eb;
        }

        .requirements-title {
            font-size: 0.9rem;
            color: #4b5563;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }

        .requirements-list {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-gap: 0.75rem;
        }

        .requirement-item {
            display: flex;
            align-items: center;
            font-size: 0.85rem;
            color: #6b7280;
        }

        .requirement-icon {
            font-size: 0.5rem;
            margin-right: 0.5rem;
            color: #d1d5db;
            transition: all 0.2s ease;
        }

        .requirement-item.valid .requirement-icon {
            color: #10b981;
        }

        .requirement-item.valid {
            color: #10b981;
        }

        /* Button Styling */
        .btn-primary {
            background: linear-gradient(45deg, #4f46e5, #6366f1);
            border: none;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            letter-spacing: 0.3px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(99, 102, 241, 0.25);
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #4338ca, #4f46e5);
            box-shadow: 0 6px 15px rgba(99, 102, 241, 0.35);
            transform: translateY(-2px);
        }

        .btn-primary:focus {
            box-shadow: 0 0 0 0.25rem rgba(99, 102, 241, 0.4);
        }

        .btn-primary:active {
            transform: translateY(1px);
        }

        .btn-outline-secondary {
            border: 1px solid #d1d5db;
            color: #4b5563;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-outline-secondary:hover {
            background-color: #f9fafb;
            color: #111827;
            border-color: #9ca3af;
            transform: translateY(-2px);
        }

        /* Security Notice */
        .security-notice {
            display: flex;
            align-items: center;
            background-color: rgba(79, 70, 229, 0.05);
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1.5rem;
            border-left: 3px solid #4f46e5;
        }

        .notice-icon {
            color: #4f46e5;
            font-size: 1.25rem;
            padding-right: 1rem;
        }

        .notice-content {
            font-size: 0.9rem;
            color: #4b5563;
            line-height: 1.4;
        }

        /* Expired Token Container */
        .expired-token-container {
            text-align: center;
            padding: 1.5rem 0.5rem;
        }

        .expired-token-icon {
            font-size: 3rem;
            color: #f59e0b;
            margin-bottom: 1rem;
        }

        .expired-token-title {
            font-size: 1.5rem;
            color: #1f2937;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }

        .expired-token-message {
            color: #4b5563;
            margin-bottom: 1.5rem;
            font-size: 1rem;
        }

        .expired-token-actions {
            max-width: 350px;
            margin: 0 auto;
        }

        /* Alert Styling */
        .alert {
            border: none;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .alert-content {
            display: flex;
            align-items: flex-start;
        }

        .alert-icon {
            font-size: 1.25rem;
            margin-right: 0.75rem;
            margin-top: 0.125rem;
        }

        .alert-message {
            flex: 1;
        }

        .alert-danger {
            background-color: #fee2e2;
            color: #b91c1c;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #15803d;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #92400e;
        }

        /* Animations */
        .animated {
            animation-duration: 0.4s;
            animation-fill-mode: both;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fadeIn {
            animation-name: fadeIn;
        }

        /* Responsive adjustments */
        @media (max-width: 576px) {
            .auth-header {
                padding: 0.5rem 1.5rem 1rem;
            }

            .auth-body {
                padding: 1rem 1.5rem;
            }

            .auth-footer {
                padding: 1.5rem;
            }

            .requirements-list {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Password visibility toggle
            const toggleButtons = document.querySelectorAll('.toggle-password');

            toggleButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const input = this.previousElementSibling;
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);

                    // Toggle icon
                    const icon = this.querySelector('i');
                    icon.classList.toggle('fa-eye');
                    icon.classList.toggle('fa-eye-slash');
                });
            });

            // Form validation
            const form = document.querySelector('#resetPasswordForm');
            const validationFeedback = document.getElementById('validationFeedback');
            const validationMessage = document.getElementById('validationMessage');
            const updateButton = document.getElementById('updateButton');
            const updateSpinner = document.getElementById('updateSpinner');
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const progressBar = document.querySelector('.progress-bar');
            const strengthText = document.querySelector('.strength-text span');
            const charCount = document.getElementById('charCount');

            // Password requirement elements
            const reqLength = document.getElementById('req-length');
            const reqUppercase = document.getElementById('req-uppercase');
            const reqLowercase = document.getElementById('req-lowercase');
            const reqNumber = document.getElementById('req-number');
            const reqSpecial = document.getElementById('req-special');

            if (form) {
                form.addEventListener('submit', function (event) {
                    // Clear previous validation messages
                    hideValidationMessage();

                    // Check if passwords match
                    if (passwordInput.value !== confirmPasswordInput.value) {
                        event.preventDefault();
                        event.stopPropagation();

                        confirmPasswordInput.classList.add('is-invalid');
                        confirmPasswordInput.setCustomValidity('Passwords do not match');

                        showValidationMessage("Passwords do not match");
                        return;
                    } else {
                        confirmPasswordInput.classList.remove('is-invalid');
                        confirmPasswordInput.setCustomValidity('');
                    }

                    // Check if form is valid
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();

                        // Find the first invalid field
                        const invalidField = form.querySelector(':invalid');
                        if (invalidField) {
                            invalidField.focus();

                            // Show validation message
                            showValidationMessage("Please correct the highlighted fields");
                        }

                        form.classList.add('was-validated');
                    } else {
                        // Form is valid, show loading state
                        updateButton.disabled = true;
                        updateButton.querySelector('.button-text').textContent = 'Updating...';
                        updateSpinner.classList.remove('d-none');
                    }
                });
            }

            // Password field validation and requirements checking
            if (passwordInput) {
                passwordInput.addEventListener('input', function () {
                    const value = this.value;

                    // Update character count
                    if (charCount) charCount.textContent = value.length;

                    // Check validation
                    validatePassword(this);

                    // Check password strength
                    const strength = checkPasswordStrength(value);
                    updatePasswordStrength(strength);

                    // Check individual requirements
                    checkRequirements(value);

                    // If confirm password has value, validate it too
                    if (confirmPasswordInput && confirmPasswordInput.value) {
                        validateConfirmPassword();
                    }
                });

                passwordInput.addEventListener('blur', function () {
                    validatePassword(this, true);
                });
            }

            // Confirm password validation
            if (confirmPasswordInput) {
                confirmPasswordInput.addEventListener('input', function () {
                    validateConfirmPassword();
                });

                confirmPasswordInput.addEventListener('blur', function () {
                    validateConfirmPassword(true);
                });
            }

            // Check individual password requirements
            function checkRequirements(password) {
                // Length requirement (at least 8 chars)
                if (password.length >= 8) {
                    reqLength.classList.add('valid');
                } else {
                    reqLength.classList.remove('valid');
                }

                // Uppercase letter requirement
                if (/[A-Z]/.test(password)) {
                    reqUppercase.classList.add('valid');
                } else {
                    reqUppercase.classList.remove('valid');
                }

                // Lowercase letter requirement
                if (/[a-z]/.test(password)) {
                    reqLowercase.classList.add('valid');
                } else {
                    reqLowercase.classList.remove('valid');
                }

                // Number requirement
                if (/[0-9]/.test(password)) {
                    reqNumber.classList.add('valid');
                } else {
                    reqNumber.classList.remove('valid');
                }

                // Special character requirement
                if (/[^A-Za-z0-9]/.test(password)) {
                    reqSpecial.classList.add('valid');
                } else {
                    reqSpecial.classList.remove('valid');
                }
            }

            // Validation function for password
            function validatePassword(field, showError = false) {
                const value = field.value.trim();

                if (value === '') {
                    // Empty field, don't show validation yet unless showError is true
                    if (showError) {
                        field.classList.add('is-invalid');
                        field.setCustomValidity('Please enter a password');
                    } else {
                        field.classList.remove('is-invalid', 'is-valid');
                        field.setCustomValidity('');
                    }
                } else if (value.length < 8) {
                    field.classList.add('is-invalid');
                    field.classList.remove('is-valid');
                    field.setCustomValidity('Password must be at least 8 characters');
                } else {
                    field.classList.add('is-valid');
                    field.classList.remove('is-invalid');
                    field.setCustomValidity('');
                }
            }

            // Validation function for confirm password
            function validateConfirmPassword(showError = false) {
                if (!confirmPasswordInput || !passwordInput) return;

                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                if (confirmPassword === '') {
                    if (showError) {
                        confirmPasswordInput.classList.add('is-invalid');
                        confirmPasswordInput.setCustomValidity('Please confirm your password');
                    } else {
                        confirmPasswordInput.classList.remove('is-invalid', 'is-valid');
                        confirmPasswordInput.setCustomValidity('');
                    }
                } else if (password !== confirmPassword) {
                    confirmPasswordInput.classList.add('is-invalid');
                    confirmPasswordInput.classList.remove('is-valid');
                    confirmPasswordInput.setCustomValidity('Passwords do not match');
                } else {
                    confirmPasswordInput.classList.add('is-valid');
                    confirmPasswordInput.classList.remove('is-invalid');
                    confirmPasswordInput.setCustomValidity('');
                }
            }

            // Check password strength
            function checkPasswordStrength(password) {
                if (!password) return 0;

                let strength = 0;

                // Length check
                if (password.length >= 8) strength += 1;
                if (password.length >= 12) strength += 1;

                // Character variety checks
                if (/[A-Z]/.test(password)) strength += 1; // Has uppercase
                if (/[a-z]/.test(password)) strength += 1; // Has lowercase
                if (/[0-9]/.test(password)) strength += 1; // Has number
                if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Has special char

                return Math.min(strength, 5);
            }

            // Update password strength indicator
            function updatePasswordStrength(strength) {
                if (!progressBar || !strengthText) return;

                // Update progress bar
                const percentage = (strength / 5) * 100;
                progressBar.style.width = percentage + '%';
                progressBar.setAttribute('aria-valuenow', percentage);

                // Update color and text based on strength
                progressBar.className = 'progress-bar';
                if (strength <= 1) {
                    progressBar.classList.add('bg-danger');
                    strengthText.textContent = 'Too weak';
                } else if (strength === 2) {
                    progressBar.classList.add('bg-warning');
                    strengthText.textContent = 'Weak';
                } else if (strength === 3) {
                    progressBar.classList.add('bg-info');
                    strengthText.textContent = 'Medium';
                } else if (strength === 4) {
                    progressBar.classList.add('bg-primary');
                    strengthText.textContent = 'Strong';
                } else {
                    progressBar.classList.add('bg-success');
                    strengthText.textContent = 'Very strong';
                }
            }

            // Show validation message
            function showValidationMessage(message) {
                if (validationFeedback && validationMessage) {
                    validationMessage.textContent = message;
                    validationFeedback.classList.remove('d-none');

                    // Reset the animation to trigger it again
                    validationFeedback.style.animation = 'none';
                    validationFeedback.offsetHeight; // Trigger reflow
                    validationFeedback.style.animation = null;
                }
            }

            // Hide validation message
            function hideValidationMessage() {
                if (validationFeedback) {
                    validationFeedback.classList.add('d-none');
                }
            }

            // Focus on password field on page load for better UX
            if (passwordInput && !passwordInput.value) {
                setTimeout(() => {
                    passwordInput.focus();
                }, 500);
            }
        });
    </script>