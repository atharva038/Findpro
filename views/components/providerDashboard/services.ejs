<section id="services" class="dashboard-section">
  <div class="section-header">
    <h2><i class="fas fa-tools me-2"></i>My Services</h2>
    <% 
    const hasFullCategories = provider.servicesOffered.every(group => 
      group.services && group.services.length >= 5
    );
    if (!hasFullCategories) { 
  %>
    <a href="/dashboard/registerService" class="btn btn-primary">
      <i class="fas fa-plus-circle me-2"></i>Add New Service
    </a>
      <% } %>
  </div>

  <% if (provider && provider.servicesOffered && provider.servicesOffered.length
  > 0) { %>
  <div class="services-container">
    <div class="accordion" id="servicesAccordion">
      <% provider.servicesOffered.forEach(function(categoryGroup, index) { %>
      <div class="accordion-item category-group mb-3">
        <h2 class="accordion-header" id="heading<%= index %>">
          <button
            class="accordion-button <%= index > 0 ? 'collapsed' : '' %>"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#collapse<%= index %>"
            aria-expanded="<%= index === 0 ? 'true' : 'false' %>"
            aria-controls="collapse<%= index %>"
          >
            <div class="category-title">
              <span class="category-name"
                ><%= categoryGroup.category ? categoryGroup.category.name :
                'Uncategorized' %></span
              >
              <span class="service-count badge bg-primary rounded-pill ms-2">
                <%= categoryGroup.services ? categoryGroup.services.length : 0
                %>
              </span>
            </div>
          </button>
        </h2>

        <div
          id="collapse<%= index %>"
          class="accordion-collapse collapse <%= index === 0 ? 'show' : '' %>"
          aria-labelledby="heading<%= index %>"
          data-bs-parent="#servicesAccordion"
        >
          <div class="accordion-body p-0">
            
            <div class="services-grid">
              <% if (categoryGroup.services && categoryGroup.services.length >
              0) { %> <% categoryGroup.services.forEach(function(serviceItem) {
              %>
              <div
                class="service-card"
                data-service-id="<%= typeof serviceItem.service === 'string' ? serviceItem.service : (serviceItem.service?._id || '') %>"
              >
                <% if (typeof serviceItem.service === 'object' &&
                serviceItem.service !== null) { %>
                <!-- Service is already populated -->
                <div class="service-header">
                  <h4><%= serviceItem.service.name || 'Unnamed Service' %></h4>
                </div>
                <div class="service-image">
                  <img
                    src="<%= serviceItem.service.img || 'https://placehold.co/300x200?text=No+Image' %>"
                    alt="<%= serviceItem.service.name || 'Service' %>"
                    onerror="this.onerror=null; this.src='https://placehold.co/300x200?text=No+Image';"
                  />
                </div>
                <% } else { %>
                <div class="service-header">
                  <h4 class="service-name">Loading...</h4>
                </div>
                <div class="service-image">
                  <img
                    src="https://placehold.co/300x200?text=Loading..."
                    alt="Loading service"
                    class="service-img"
                    onerror="this.onerror=null; this.src='https://placehold.co/300x200?text=No+Image';"
                  />
                </div>
                <% } %>

                <div class="service-details">
                  <div class="detail-row">
                    <span class="label">Price:</span>
                    <span class="value"
                      >â‚¹<%= serviceItem.customCost || 'N/A' %></span
                    >
                  </div>
                  <% if (serviceItem.experience) { %>
                  <div class="detail-row">
                    <span class="label">Experience:</span>
                    <span class="value"><%= serviceItem.experience %></span>
                  </div>
                  <% } %>
                </div>

                <div class="service-actions">
                  <a
                    href="/dashboard/editService/<%= serviceItem._id %>?category=<%= categoryGroup.category._id %>"
                    class="btn btn-sm btn-outline-primary"
                  >
                    <i class="fas fa-edit me-1"></i>Edit
                  </a>
                  <button
                    class="btn btn-sm btn-outline-danger delete-service"
                    data-id="<%= serviceItem._id %>"
                    data-category="<%= categoryGroup.category._id %>"
                  >
                    <i class="fas fa-trash me-1"></i>Delete
                  </button>
                </div>
              </div>
              <% }); %> <% } else { %>
              <div class="empty-category">
                <p>No services added in this category</p>
              </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
  </div>
  <% } else { %>
  <div class="empty-state">
    <div class="empty-content">
      <i class="fas fa-tools fa-3x mb-3"></i>
      <h4>No services yet</h4>
      <p>Start by adding your first service</p>
      <a href="/dashboard/registerService" class="btn btn-primary mt-3">
        <i class="fas fa-plus-circle me-2"></i>Add Service
      </a>
    </div>
  </div>
  <% } %>
</section>

<!-- Modal for delete confirmation -->
<div class="modal fade" id="deleteServiceModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete Service</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this service?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-danger" id="confirmDeleteService">
          Delete
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .services-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  /* Accordion Style Overrides */
  .accordion-item {
    border: 1px solid rgba(0, 0, 0, 0.125);
    border-radius: 8px !important;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .accordion-button {
    padding: 1rem 1.5rem;
    font-weight: 500;
    background-color: #f8f9fa;
  }

  .accordion-button:not(.collapsed) {
    color: #0d6efd;
    background-color: rgba(13, 110, 253, 0.1);
    box-shadow: none;
  }

  .accordion-button:focus {
    box-shadow: none;
    border-color: rgba(13, 110, 253, 0.25);
  }

  .category-title {
    display: flex;
    align-items: center;
    width: 100%;
  }

  .category-name {
    font-size: 1.1rem;
    color: #212529;
  }

  .service-count {
    font-size: 0.85rem;
  }

  /* Services Grid Layout */
  .services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.25rem;
    padding: 1.25rem;
  }

  /* Service Card Styling */
  .service-card {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    background-color: white;
  }

  .service-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .service-header {
    padding: 1rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
  }

  .service-header h4 {
    margin: 0;
    font-size: 1.1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .service-image {
    height: 160px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f8f9fa;
  }

  .service-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .service-card:hover .service-image img {
    transform: scale(1.05);
  }

  .service-details {
    padding: 1rem;
    flex-grow: 1;
  }

  .detail-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .label {
    font-weight: 500;
    color: #6c757d;
  }

  .value {
    font-weight: 600;
  }

  .service-actions {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    border-top: 1px solid #e9ecef;
    background-color: #f8f9fa;
  }

  /* Empty States */
  .empty-state {
    background-color: white;
    border-radius: 8px;
    padding: 3rem;
    text-align: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .empty-category {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
    grid-column: 1 / -1;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px dashed #dee2e6;
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .services-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    }
  }

  @media (max-width: 576px) {
    .services-grid {
      grid-template-columns: 1fr;
    }
  }


   .alert {
    margin-bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  

</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const deleteButtons = document.querySelectorAll(".delete-service");

    if (typeof bootstrap === "undefined") {
      console.error("Bootstrap is not defined");
      return;
    }

    const deleteModalElement = document.getElementById("deleteServiceModal");
    if (!deleteModalElement) {
      console.error("Modal element not found");
      return;
    }

    const deleteModal = new bootstrap.Modal(deleteModalElement);
    const confirmDeleteBtn = document.getElementById("confirmDeleteService");
    let serviceIdToDelete;
    let categoryIdToDelete;

    deleteButtons.forEach(function (button) {
      button.addEventListener("click", function () {
        serviceIdToDelete = this.getAttribute("data-id");
        categoryIdToDelete = this.getAttribute("data-category");
        console.log("Delete clicked:", serviceIdToDelete, categoryIdToDelete);
        deleteModal.show();
      });
    });

    confirmDeleteBtn.addEventListener("click", async function () {
      try {
        const response = await fetch(
          `/dashboard/service/delete/${serviceIdToDelete}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ categoryId: categoryIdToDelete }),
          }
        );

        if (response.ok) {
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.message || "Failed to delete service");
        }
      } catch (error) {
        console.error("Error deleting service:", error);
        alert("An error occurred while deleting service");
      } finally {
        deleteModal.hide();
      }
    });

    // Fetch and populate service details
    const serviceCards = document.querySelectorAll(
      ".service-card[data-service-id]"
    );
    serviceCards.forEach(function (card) {
      const serviceId = card.getAttribute("data-service-id");
      if (serviceId && serviceId !== "undefined" && serviceId !== "null") {
        fetchServiceDetails(serviceId, card);
      }
    });

    async function fetchServiceDetails(serviceId, card) {
      try {
        // Skip invalid serviceIds
        if (
          !serviceId ||
          serviceId === "undefined" ||
          serviceId === "null" ||
          serviceId === "[object Object]"
        ) {
          console.warn("Invalid service ID:", serviceId);
          const nameElement = card.querySelector(".service-name");
          const imageElement = card.querySelector(".service-img");

          if (nameElement) nameElement.textContent = "Unknown Service";
          if (imageElement)
            imageElement.src =
              "https://placehold.co/300x200?text=Unknown+Service";
          return;
        }

        const response = await fetch(`/dashboard/service/${serviceId}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch service: ${response.status}`);
        }

        const data = await response.json();
        if (data.success && data.service) {
          const nameElement = card.querySelector(".service-name");
          const imageElement = card.querySelector(".service-img");

          if (nameElement)
            nameElement.textContent = data.service.name || "Unnamed Service";
          if (imageElement) {
            imageElement.src =
              data.service.img || "https://placehold.co/300x200?text=No+Image";
            imageElement.alt = data.service.name || "Service";
          }
        }
      } catch (error) {
        console.error("Error fetching service details:", error);
        // Handle error by setting fallback content
        const nameElement = card.querySelector(".service-name");
        const imageElement = card.querySelector(".service-img");

        if (nameElement) nameElement.textContent = "Error Loading Service";
        if (imageElement)
          imageElement.src = "https://placehold.co/300x200?text=Error";
      }
    }

    // Save accordion state in localStorage
    const accordionItems = document.querySelectorAll(".accordion-button");

    // Load saved states
    accordionItems.forEach((item, index) => {
      const storageKey = `serviceCategory_${index}`;
      const savedState = localStorage.getItem(storageKey);

      if (savedState === "open") {
        const targetId = item.getAttribute("data-bs-target");
        const targetPanel = document.querySelector(targetId);

        item.classList.remove("collapsed");
        item.setAttribute("aria-expanded", "true");
        if (targetPanel) {
          targetPanel.classList.add("show");
        }
      }
    });

    // Save state on click
    accordionItems.forEach((item, index) => {
      item.addEventListener("click", () => {
        const isExpanded = item.getAttribute("aria-expanded") === "true";
        const storageKey = `serviceCategory_${index}`;

        // After click, the state will be toggled, so we save the opposite
        if (isExpanded) {
          localStorage.setItem(storageKey, "closed");
        } else {
          localStorage.setItem(storageKey, "open");
        }
      });
    });
  });

      function updateServiceCountBadges() {
      // document.querySelectorAll('.category-group').forEach(group => {
      //   const services = group.querySelectorAll('.service-card');
      //   const countBadge = group.querySelector('.service-count');
        
      //   if (countBadge) {
      //     const count = services.length;
      //     countBadge.textContent = count;
          
      //     if (count >= 5) {
      //       countBadge.classList.add('limit-reached');
      //     } else {
      //       countBadge.classList.remove('limit-reached');
      //     }
      //   }
      // });
    }

    // Call initially and after any service changes
    updateServiceCountBadges();

    // Update add service button visibility
    function updateAddServiceButton(categoryId) {
      // const addButtons = document.querySelectorAll(`a[href*="/dashboard/registerService"][href*="${categoryId}"]`);
      // const category = document.querySelector(`[data-category="${categoryId}"]`);
      
      // if (category) {
      //   const serviceCount = category.querySelectorAll('.service-card').length;
      //   addButtons.forEach(button => {
      //     if (serviceCount >= 5) {
      //       button.style.display = 'none';
      //     } else {
      //       button.style.display = 'inline-flex';
      //     }
      //   });
      // }
    }

    // Call after service deletion
    confirmDeleteBtn.addEventListener("click", async function () {
    try {
        const response = await fetch(`/dashboard/service/delete/${serviceIdToDelete}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ categoryId: categoryIdToDelete }),
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const data = await response.json();
            alert(data.message || "Failed to delete service");
        }
    } catch (error) {
        console.error("Error deleting service:", error);
        alert("An error occurred while deleting service");
    } finally {
        deleteModal.hide();
    }
});
</script>
